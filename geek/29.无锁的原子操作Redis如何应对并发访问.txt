1. 并发访问中需要对什么进行控制:
    我们说的并发访问控制，是指对多个客户端访问操作同一份数据的过程进行控制，
    以保证任何一个客户端发送的操作在Redis实例上执行时具有互斥性

2. Redis的两种原子操作方法
    为了实现并发控制要求的临界区代码互斥执行，Redis的原子操作采用了两种方法：

    把多个操作在Redis中实现成一个操作，也就是单命令操作；
    把多个操作写到一个Lua脚本中，以原子性方式执行单个Lua脚本。

3. incr/decr如何实现原子操作
    Redis是使用单线程来串行处理客户端的请求操作命令的，所以，当Redis执行某个命令操作时，
    其他命令是无法执行的，这相当于命令操作是互斥执行的

    Redis提供了INCR/DECR命令，把这三个操作转变为一个原子操作了。INCR/DECR命令可以对数据进行增值/减值操作，
    而且它们本身就是单个命令操作，Redis在执行它们时，本身就具有互斥性

    如果我们执行的RMW操作是对数据进行增减值的话，Redis提供的原子操作INCR和DECR可以直接帮助我们进行并发控制

4. lua脚本实现多命令的原子操作
        //获取ip对应的访问次数
        current = GET(ip)
        //如果超过访问次数超过20次，则报错
        IF current != NULL AND current > 20 THEN
            ERROR "exceed 20 accesses per second"
        ELSE
            //如果访问次数不足20次，增加一次访问计数
            value = INCR(ip)
            //如果是第一次访问，将键值对的过期时间设置为60s后
            IF value == 1 THEN
                EXPIRE(ip,60)
            END
            //执行其他操作
            DO THINGS
        END

    local current
    current = redis.call("incr",KEYS[1])
    if tonumber(current) == 1 then
        redis.call("expire",KEYS[1],60)
    end

    redis-cli  --eval lua.script  keys , args
5. 但是，单命令原子操作的适用范围较小，并不是所有的RMW操作都能转变成单命令的原子操作
    （例如INCR/DECR命令只能在读取数据后做原子增减），当我们需要对读取的数据做更多判断，
    或者是我们对数据的修改不是简单的增减时，单命令操作就不适用了。
    
    而Redis的Lua脚本可以包含多个操作，这些操作都会以原子性的方式执行，绕开了单命令操作的限制。
    不过，如果把很多操作都放在Lua脚本中原子执行，会导致Redis执行脚本的时间增加，
    同样也会降低Redis的并发性能。所以，我给你一个小建议：在编写Lua脚本时，你要避免把不需要做并发
    控制的操作写入脚本中.

问题：
按照惯例，我向你提个小问题，Redis在执行Lua脚本时，是可以保证原子性的，那么，
在我举的Lua脚本例子（lua.script）中，你觉得是否需要把读取客户端ip的访问次数，也就是GET(ip)，
以及判断访问次数是否超过20的判断逻辑，也加到Lua脚本中吗？