1. Codis的整体架构和基本流程
    Codis集群中包含了4类关键组件:
    1. codis server：这是进行了二次开发的Redis实例，其中增加了额外的数据结构，支持数据迁移操作，
        主要负责处理具体的数据读写请求
    2. codis proxy：接收客户端请求，并把请求转发给codis server
    3. Zookeeper集群：保存集群元数据，例如数据位置信息和codis proxy信息
    4. codis dashboard和codis fe：共同组成了集群管理工具。其中，codis dashboard负责执行集群管理工作，
        包括增删codis server、codis proxy和进行数据迁移。而codis fe负责提供dashboard的Web操作界面，
        便于我们直接在Web界面上进行集群管理

2. 我就围绕影响切片集群使用效果的4方面技术因素：
    数据分布、集群扩容和数据迁移、客户端兼容性、可靠性保证，来和你聊聊它们的具体设计选择和原理，帮你掌握Codis的具体用法

3. Codis的关键技术原理
    数据是怎么在多个实例上分布的:切片存贮

4. 集群扩容和数据迁移如何进行：
        1. 启动新的codis server，将它加入集群；
        2. 把部分数据迁移到新的server。
        需要注意的是，这里的数据迁移是一个重要的机制，接下来我来重点介绍下
        在源server上，Codis从要迁移的Slot中随机选择一个数据，发送给目的server。
        目的server确认收到数据后，会给源server返回确认消息。这时，源server会在本地将刚才迁移的数据删除。
        第一步和第二步就是单个数据的迁移过程。Codis会不断重复这个迁移过程，直到要迁移的Slot中的数据全部迁移完成。

        针对刚才介绍的单个数据的迁移过程，Codis实现了两种迁移模式，分别是同步迁移和异步迁移，我们来具体看下：
        
        同步迁移是指，在数据从源server发送给目的server的过程中，源server是阻塞的，无法处理新的请求操作

        为了避免数据迁移阻塞源server，Codis实现的第二种迁移模式就是异步迁移。异步迁移的关键特点有两个：
        第一个特点是，当源server把数据发送给目的server后，就可以处理其他请求操作了，不用等到目的server的命令执行完
        第二个特点是，对于bigkey，异步迁移采用了拆分指令的方式进行迁移：
            对bigkey中每个元素，用一条指令进行迁移，而不是把整个bigkey进行序列化后再整体传输。这种化整为零的方式，
            就避免了bigkey迁移时，因为要序列化大量数据而阻塞源server的问题

5. 集群客户端需要重新开发吗

6. 可靠性是实际业务应用的一个核心要求
    对于一个分布式系统来说，它的可靠性和系统中的组件个数有关：组件越多，潜在的风险点也就越多。

7. 怎么保证集群可靠性
    Codis就使用主从集群来保证codis server的可靠性。简单来说就是，Codis给每个server配置从库，
    并使用哨兵机制进行监控，当发生故障时，主从库可以进行切换，从而保证了server的可靠性。

    在实际应用的时候，对于这两种方案，我们该怎么选择呢？我再给你提4条建议。

    从稳定性和成熟度来看，Codis应用得比较早，在业界已经有了成熟的生产部署。虽然Codis引入了proxy和Zookeeper，增加了集群复杂度，但是，proxy的无状态设计和Zookeeper自身的稳定性，也给Codis的稳定使用提供了保证。而Redis Cluster的推出时间晚于Codis，相对来说，成熟度要弱于Codis，如果你想选择一个成熟稳定的方案，Codis更加合适些。
    从业务应用客户端兼容性来看，连接单实例的客户端可以直接连接codis proxy，而原本连接单实例的客户端要想连接Redis Cluster的话，就需要开发新功能。所以，如果你的业务应用中大量使用了单实例的客户端，而现在想应用切片集群的话，建议你选择Codis，这样可以避免修改业务应用中的客户端。
    从使用Redis新命令和新特性来看，Codis server是基于开源的Redis 3.2.8开发的，所以，Codis并不支持Redis后续的开源版本中的新增命令和数据类型。另外，Codis并没有实现开源Redis版本的所有命令，比如BITOP、BLPOP、BRPOP，以及和与事务相关的MUTLI、EXEC等命令。Codis官网上列出了不被支持的命令列表，你在使用时记得去核查一下。所以，如果你想使用开源Redis 版本的新特性，Redis Cluster是一个合适的选择。
    从数据迁移性能维度来看，Codis能支持异步迁移，异步迁移对集群处理正常请求的性能影响要比使用同步迁移的小。所以，如果你在应用集群时，数据迁移比较频繁的话，Codis是个更合适的选择。

问题：
    当你有多条业务线要使用Codis时，可以启动多个codis dashboard，每个dashboard管理一部分codis server，同时，再用一个dashboard对应负责一个业务线的集群管理，这样，就可以做到用一个Codis集群实现多条业务线的隔离管理了